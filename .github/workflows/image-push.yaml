name: 'Build and Deploy to Kubernetes'

# Controls when the action will run.
on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in this workflow.
env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/tasky-app
  K8S_MANIFEST_DIR: kubernetes
  GKE_CLUSTER: tasky-app-gke-cluster # TODO: Replace with the name of your GKE cluster
  GKE_ZONE: us-east1   # TODO: Replace with the zone of your GKE cluster
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} 

jobs:
  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Login to Docker Hub
      # Uses secrets to securely log in to your Docker Hub account.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Recommended to use an Access Token

      # Step 3: Set up Docker Buildx
      # This is required for building multi-platform images, but is good practice regardless.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Build and push Docker image
      # This step builds the image from your Dockerfile and pushes it to Docker Hub.
      # The image is tagged with the latest tag and the Git commit SHA for traceability.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # Step 5: Authenticate to Google Cloud
      # Uses the official Google Cloud action to authenticate.
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Step 6: Set up GKE credentials
      # This configures kubectl to connect to the specified GKE cluster.
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Step 7: Update Kubernetes deployment manifest
      # This uses 'sed' to replace the image tag placeholder in your deployment file
      # with the new Git SHA tag. It specifically targets the deployment.yaml file.
      - name: Update Kubernetes manifest
        run: |
          sed -i 's|image: .*|image: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}|g' ${{ env.K8S_MANIFEST_DIR }}/deployment.yaml

      # Step 8: Deploy to Kubernetes
      # This applies all manifests (deployment, service, ingress, etc.) from the specified directory.
      # This ensures the entire application stack is deployed consistently.
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ${{ env.K8S_MANIFEST_DIR }}/
          kubectl rollout status deployment/tasky-app-deployment # Replace with your deployment name from deployment.yaml
